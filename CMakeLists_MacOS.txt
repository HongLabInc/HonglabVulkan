cmake_minimum_required(VERSION 3.21)

project(HonglabVulkan VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Enable vcpkg for all packages
if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake")
    set(CMAKE_TOOLCHAIN_FILE "${CMAKE_CURRENT_SOURCE_DIR}/vcpkg/scripts/buildsystems/vcpkg.cmake" 
        CACHE STRING "Vcpkg toolchain file")
    message(STATUS "Using vcpkg toolchain: ${CMAKE_TOOLCHAIN_FILE}")
elseif(DEFINED ENV{VCPKG_ROOT})
    set(CMAKE_TOOLCHAIN_FILE "$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
        CACHE STRING "Vcpkg toolchain file")
    message(STATUS "Using vcpkg from environment: ${CMAKE_TOOLCHAIN_FILE}")
endif()

# Find required packages
find_package(Vulkan REQUIRED)
find_package(PkgConfig)

# Find packages through vcpkg using correct package names
find_package(glfw3 REQUIRED CONFIG)
find_package(glm REQUIRED CONFIG)
find_package(assimp REQUIRED CONFIG)

# ImGui uses a different package name in vcpkg
find_package(imgui QUIET CONFIG)
if(NOT imgui_FOUND)
    # Try alternative names
    find_package(ImGui QUIET CONFIG)
endif()

# Find spirv-reflect (this should come from vcpkg)
find_package(spirv-reflect QUIET CONFIG)
if(NOT spirv-reflect_FOUND)
    find_package(unofficial-spirv-reflect QUIET CONFIG)
endif()

find_package(Stb QUIET CONFIG)

# Find KTX from vcpkg - note the capital K as shown in vcpkg output
find_package(Ktx REQUIRED CONFIG)

# Debug: Check what KTX targets are available
if(TARGET KTX::ktx)
    message(STATUS "Found KTX::ktx target")
elseif(TARGET ktx)
    message(STATUS "Found ktx target")
elseif(TARGET Ktx::ktx)
    message(STATUS "Found Ktx::ktx target")
else()
    message(STATUS "KTX target not found - checking available targets")
endif()

# Add subdirectories
add_subdirectory(engine)
add_subdirectory(examples)
